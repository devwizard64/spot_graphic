#!/usr/bin/env python3

import sys
import os

ply_p = {
    "uchar": int,
    "short": int,
    "uint":  int,
    "float": float,
}

def ply_read(fn):
    with open(fn, "r") as f:
        data = f.read()
    line = data.split("\n")
    i = 0
    element = []
    while True:
        argv = line[i].split()
        i += 1
        if argv[0] == "property":
            element[-1][-1].append(argv[1:])
        elif argv[0] == "element":
            element.append((argv[1], int(argv[2]), []))
        elif argv[0] == "end_header":
            break
    ply = {}
    for name, n, property in element:
        ply[name] = []
        for _ in range(n):
            argv = line[i].split()
            i += 1
            a = 0
            obj = {}
            for p in property:
                if p[0] == "list":
                    _, n, t, o = p
                    n = ply_p[n](argv[a])
                    a += 1
                    obj[o] = lst = []
                    for _ in range(n):
                        lst.append(ply_p[t](argv[a]))
                        a += 1
                else:
                    t, o = p
                    obj[o] = ply_p[t](argv[a])
                    a += 1
            ply[name].append(obj)
    return ply

def gfx_flush(buf, name, vs):
    if len(buf[2]) > 0:
        buf[1].append("gsSPVertex(&vtx_%s[%d], %d, %d),\n" % (
            name, len(buf[0]), len(buf[2]), vs
        ))
    for i in range(0, len(buf[3]) & ~1, 2):
        v0, v1, v2 = buf[3][i+0]
        v3, v4, v5 = buf[3][i+1]
        arg = (vs+v0, vs+v1, vs+v2, vs+v3, vs+v4, vs+v5)
        buf[1].append(
            "gsSP2Triangles(%2d, %2d, %2d, 0, %2d, %2d, %2d, 0),\n" % arg
        )
    if len(buf[3]) & 1:
        v0, v1, v2 = buf[3][-1]
        arg = (vs+v0, vs+v1, vs+v2)
        buf[1].append("gsSP1Triangle(%2d, %2d, %2d, 0),\n" % arg)
    buf[0] += buf[2]
    buf[2] = []
    buf[3] = []

def sh(x):
    return max(-0x8000, min(0x7FFF, int(round(x))))

def sb(x):
    return max(-0x80, min(0x7F, int(round(x))))

gfx_rgba_table = {
    "x": (lambda v: "%4d" % sb(0x80*v["nx"])),
    "y": (lambda v: "%4d" % sb(0x80*v["ny"])),
    "z": (lambda v: "%4d" % sb(0x80*v["nz"])),
    "r": (lambda v: "0x%02X" % v["red"]),
    "g": (lambda v: "0x%02X" % v["green"]),
    "b": (lambda v: "0x%02X" % v["blue"]),
    "a": (lambda v: "0x%02X" % v["alpha"]),
}

def gfx_rgba(x):
    if x in gfx_rgba_table:
        return gfx_rgba_table[x]
    return lambda v: x

def gfx_write(path, name, ply, ini):
    ss, st, ts, tt = [float(x) for x in ini["t"]]
    vs, ve = [int(x) for x in ini["v"]]
    vtx = ply["vertex"]
    tri = []
    for face in ply["face"]:
        face = face["vertex_indices"]
        for i in range(len(face)-2):
            tri.append((face[0], face[1+i], face[2+i]))
    buf = [[], [], [], []]
    for t in tri:
        cnt = ve-vs - 3
        for v in t:
            if v in buf[2]:
                cnt += 1
        if len(buf[2]) > cnt:
            gfx_flush(buf, name, vs)
        lst = []
        for v in t:
            if v in buf[2]:
                lst.append(buf[2].index(v))
            else:
                lst.append(len(buf[2]))
                buf[2].append(v)
        buf[3].append(lst)
    gfx_flush(buf, name, vs)
    r = gfx_rgba(ini["s"][0])
    g = gfx_rgba(ini["s"][1])
    b = gfx_rgba(ini["s"][2])
    a = gfx_rgba(ini["s"][3])
    data = ("static const Vtx vtx_%s[] =\n{\n" % name) + "".join([
        "    {{{%6d, %6d, %6d}, 0, {%6d, %6d}, {%s, %s, %s, %s}}},\n" % (
            sh(vtx[v]["x"]),
            sh(vtx[v]["y"]),
            sh(vtx[v]["z"]),
            sh(0x20*(ts + ss*(    vtx[v]["s"] if "s" in vtx[v] else 0.0))),
            sh(0x20*(tt + st*(1.0-vtx[v]["t"] if "t" in vtx[v] else 0.0))),
            r(vtx[v]),
            g(vtx[v]),
            b(vtx[v]),
            a(vtx[v]),
        )
        for v in buf[0]
    ]) + "};\n"
    with open(path + ".vtx.h", "w") as f:
        f.write(data)
    data = "".join(buf[1])
    with open(path + ".h", "w") as f:
        f.write(data)

def main(argv):
    if len(argv) != 3:
        print("usage: %s <output> <input>\n" % argv[0])
        return 1
    path = argv[1].rpartition(".")[0]
    obj, _, name = path.rpartition(os.path.sep)
    name = obj.rpartition(os.path.sep)[-1] + "_" + name
    ply = ply_read(argv[2])
    ini = {
        "v": ["0", "16"],
        "t": ["0", "0", "0", "0"],
        "s": ["x", "y", "z", "0"],
    }
    fn = argv[2].rpartition(".")[0] + ".ini"
    if os.path.isfile(fn):
        with open(fn, "r") as f:
            data = f.read()
        for line in data.split("\n"):
            i, _, lst = line.partition("=")
            ini[i] = lst.split(",")
        data = "%s: %s\n" % (argv[1], fn)
        with open(path + ".d", "w") as f:
            f.write(data)
    gfx_write(path, name, ply, ini)
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv))
